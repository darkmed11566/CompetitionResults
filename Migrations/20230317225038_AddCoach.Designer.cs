// <auto-generated />
using System;
using CompetitionResults.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CompetitionResults.Migrations
{
    [DbContext(typeof(WebContext))]
    [Migration("20230317225038_AddCoach")]
    partial class AddCoach
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CompetitionResults.Models.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("CompetitionResults.Models.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndtDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFull")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("CompetitionResults.Models.Competitioner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoatClass")
                        .HasColumnType("int");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("SportsmanId")
                        .HasColumnType("int");

                    b.Property<int>("StatusInTrack")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("SportsmanId");

                    b.ToTable("Competitioners");
                });

            modelBuilder.Entity("CompetitionResults.Models.GateWithPenalty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GateNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectorId");

                    b.ToTable("GateWithPenalties");
                });

            modelBuilder.Entity("CompetitionResults.Models.GateWithPenaltyPassage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetitionerId")
                        .HasColumnType("int");

                    b.Property<int>("GateWihtPenaltyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PenaltyOnGate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionerId");

                    b.HasIndex("GateWihtPenaltyId");

                    b.ToTable("GateWithPenaltiePassages");
                });

            modelBuilder.Entity("CompetitionResults.Models.GateWithTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GateName")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.ToTable("GateWithTimes");
                });

            modelBuilder.Entity("CompetitionResults.Models.GateWithTimePassage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetitionerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("GatePasssage")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateWihtTimeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionerId");

                    b.HasIndex("GateWihtTimeId");

                    b.ToTable("GateWithTimePassages");
                });

            modelBuilder.Entity("CompetitionResults.Models.Judge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Judges");
                });

            modelBuilder.Entity("CompetitionResults.Models.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFull")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("CompetitionResults.Models.Sportsman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Achievements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClubName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rang")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("URLPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("Sportsmens");
                });

            modelBuilder.Entity("CompetitionResults.Models.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFull")
                        .HasColumnType("bit");

                    b.Property<int>("TrackType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("CompetitionResults.Models.Competitioner", b =>
                {
                    b.HasOne("CompetitionResults.Models.Competition", "Competition")
                        .WithMany("Competitioners")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetitionResults.Models.Sportsman", "Sportsman")
                        .WithMany("Competitioners")
                        .HasForeignKey("SportsmanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("Sportsman");
                });

            modelBuilder.Entity("CompetitionResults.Models.GateWithPenalty", b =>
                {
                    b.HasOne("CompetitionResults.Models.Sector", "Sector")
                        .WithMany("GatesWithPenalty")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("CompetitionResults.Models.GateWithPenaltyPassage", b =>
                {
                    b.HasOne("CompetitionResults.Models.Competitioner", "Competitioner")
                        .WithMany("GateWithPenaltyPassages")
                        .HasForeignKey("CompetitionerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetitionResults.Models.GateWithPenalty", "PenaltyGate")
                        .WithMany("PenaltyPassages")
                        .HasForeignKey("GateWihtPenaltyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Competitioner");

                    b.Navigation("PenaltyGate");
                });

            modelBuilder.Entity("CompetitionResults.Models.GateWithTime", b =>
                {
                    b.HasOne("CompetitionResults.Models.Track", "Track")
                        .WithMany("Gates")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");
                });

            modelBuilder.Entity("CompetitionResults.Models.GateWithTimePassage", b =>
                {
                    b.HasOne("CompetitionResults.Models.Competitioner", "Competitioner")
                        .WithMany("GateWithTimePassages")
                        .HasForeignKey("CompetitionerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetitionResults.Models.GateWithTime", "TimeGate")
                        .WithMany("TimePassages")
                        .HasForeignKey("GateWihtTimeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Competitioner");

                    b.Navigation("TimeGate");
                });

            modelBuilder.Entity("CompetitionResults.Models.Sector", b =>
                {
                    b.HasOne("CompetitionResults.Models.Track", "Track")
                        .WithMany("Sectors")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");
                });

            modelBuilder.Entity("CompetitionResults.Models.Sportsman", b =>
                {
                    b.HasOne("CompetitionResults.Models.Coach", "Coach")
                        .WithMany("Sportsmens")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("CompetitionResults.Models.Track", b =>
                {
                    b.HasOne("CompetitionResults.Models.Competition", "Competition")
                        .WithMany("Tracks")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("CompetitionResults.Models.Coach", b =>
                {
                    b.Navigation("Sportsmens");
                });

            modelBuilder.Entity("CompetitionResults.Models.Competition", b =>
                {
                    b.Navigation("Competitioners");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("CompetitionResults.Models.Competitioner", b =>
                {
                    b.Navigation("GateWithPenaltyPassages");

                    b.Navigation("GateWithTimePassages");
                });

            modelBuilder.Entity("CompetitionResults.Models.GateWithPenalty", b =>
                {
                    b.Navigation("PenaltyPassages");
                });

            modelBuilder.Entity("CompetitionResults.Models.GateWithTime", b =>
                {
                    b.Navigation("TimePassages");
                });

            modelBuilder.Entity("CompetitionResults.Models.Sector", b =>
                {
                    b.Navigation("GatesWithPenalty");
                });

            modelBuilder.Entity("CompetitionResults.Models.Sportsman", b =>
                {
                    b.Navigation("Competitioners");
                });

            modelBuilder.Entity("CompetitionResults.Models.Track", b =>
                {
                    b.Navigation("Gates");

                    b.Navigation("Sectors");
                });
#pragma warning restore 612, 618
        }
    }
}
