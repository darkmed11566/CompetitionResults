@inject CompetitionResults.Data.Repository.GateWithTimeRepository gateWithTimeRepository;
@inject CompetitionResults.Data.Repository.TrackRepository trackRepository;
@page "/addTracks"
@using EnumsAndConstants

<div class="row">
    <div class="col">

        <select class=" form-control" name="Type" @bind="newType">
            <option value="Run1">
                @TrackType.Run1
            </option>
            <option value="Run2">
                @TrackType.Run2
            </option>
            <option value="QualificationRun1">
                @TrackType.QualificationRun1
            </option>
            <option value="QualificationRun2">
                @TrackType.QualificationRun2
            </option>
            <option value="SemiFinal">
                @TrackType.SemiFinal
            </option>
            <option value="Final">
                @TrackType.Final
            </option>

        </select>

        <div class=" col">
            <button class=" btn btn-success" @onclick="AddTrack">Add Track</button>
        </div>
    </div>
</div>

<div class=" container-fluid">
    <div class=" row">
        <div class="col">
            <h2>List of Tracks</h2>
            <table class=" table table-striped">
                <thead class=" table-dark">
                    <tr>
                        <th scope="col">Track Type </th>

                    </tr>
                </thead>
                @foreach (var item in track)
                {
                    <tbody>
                        <tr>
                            <td>
                                @item.TrackType
                            </td>
                            <td>
                                <button class=" btn-dark">Edite</button>
                            </td>
                            <td>
                                <button class=" btn-danger" @onclick="(()=>DeleteTrack(item.Id))">Delete</button>
                            </td>
                        </tr>
                    </tbody>
                }

            </table>
        </div>
    </div>
</div>

@code {

    private IEnumerable<Track> track = new List<Track>();
    private IEnumerable<GateWithTime> gate = new List<GateWithTime>();

    protected override void OnInitialized()
    {
        track = trackRepository.GetAll();
    }

    private TrackType newType;


    private void AddTrack()
    {
        var dbTrack = new Track();

        dbTrack.TrackType = newType;

        dbTrack.IsActive = true;

        trackRepository.Save(dbTrack);

        var dbGateWithTimeStart = new GateWithTime();

        dbGateWithTimeStart.Type = GateType.StartingGate;

        dbGateWithTimeStart.GateName = GateNameWithTime.Start;

        dbGateWithTimeStart.IsActive = true;

        gateWithTimeRepository.Save(dbGateWithTimeStart);

        var dbGateWithTimeFinish = new GateWithTime();

        dbGateWithTimeFinish.Type = GateType.FinisGate;

        dbGateWithTimeFinish.GateName = GateNameWithTime.Finish;

        dbGateWithTimeFinish.IsActive = true;

        gateWithTimeRepository.Save(dbGateWithTimeFinish);

    }



    private void DeleteTrack(long id)
    {
        trackRepository.Remove(id);
    }

}
